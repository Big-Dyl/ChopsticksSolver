{"version":3,"file":"static/js/440.59a5a924.chunk.js","mappings":"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","sources":["Minimax.ts","play-move-worker.ts"],"sourcesContent":["export class Solver{\r\n    status = [[1,1],[1,1]];\r\n    hashTable = new Map();\r\n    doleftovers = true;\r\n    constructor(s : number[], d : boolean){\r\n        this.status = [[s[0],s[1]],[s[2],s[3]]];\r\n        this.doleftovers = d;\r\n    }\r\n    getBestMove = (isMaximizing:boolean,depth:number) => {\r\n        if(isMaximizing){\r\n            let moves = this.getMoves(0);\r\n            let bestScore = -Infinity;\r\n            let bestMove = 0;\r\n            for(let i = 0; i < moves.length; i++){\r\n                let save = [[this.status[0][0],this.status[0][1]],[this.status[1][0],this.status[1][1]]];\r\n                this.playMove(moves[i]);\r\n                let score = this.solveBoard(false,depth-1);\r\n                this.status = [[save[0][0],save[0][1]],[save[1][0],save[1][1]]];\r\n                if(score > bestScore){\r\n                    bestScore = score; \r\n                    bestMove = moves[i];\r\n                }\r\n            }\r\n            return bestMove;\r\n        } else {\r\n            let moves = this.getMoves(1);\r\n            let bestScore = Infinity;\r\n            let bestMove = 0;\r\n            for(let i = 0; i < moves.length; i++){\r\n                let save = [[this.status[0][0],this.status[0][1]],[this.status[1][0],this.status[1][1]]];\r\n                this.playMove(moves[i]);\r\n                let score = this.solveBoard(true,depth-1);\r\n                this.status = [[save[0][0],save[0][1]],[save[1][0],save[1][1]]];\r\n                if(score < bestScore){\r\n                    bestScore = score;\r\n                    bestMove = moves[i]; \r\n                }\r\n            }\r\n            return bestMove;\r\n        }\r\n    }\r\n    solveBoard = (isMaximizing:boolean,depth:number) => {\r\n        if(this.hashTable.has(`${this.status[0][0]}${this.status[0][1]}${this.status[1][0]}${this.status[1][1]}${isMaximizing ? 1 : 0}d${depth}`)){\r\n            return this.hashTable.get(`${this.status[0][0]}${this.status[0][1]}${this.status[1][0]}${this.status[1][1]}${isMaximizing ? 1 : 0}d${depth}`);\r\n        }\r\n        if(depth <= 0){\r\n            return 0;\r\n        }\r\n        if(this.status[0][0] == 0 && this.status[0][1] == 0){\r\n            return -depth;\r\n        }\r\n        if(this.status[1][0] == 0 && this.status[1][1] == 0){\r\n            return depth;\r\n        }\r\n        if(isMaximizing){\r\n            let moves = this.getMoves(0);\r\n            let bestScore = -Infinity;\r\n            for(let i = 0; i < moves.length; i++){\r\n                let save = [[this.status[0][0],this.status[0][1]],[this.status[1][0],this.status[1][1]]];\r\n                this.playMove(moves[i]);\r\n                let score = this.solveBoard(false,depth-1);\r\n                this.status = [[save[0][0],save[0][1]],[save[1][0],save[1][1]]];\r\n                if(score > bestScore){\r\n                    bestScore = score; \r\n                }\r\n            }\r\n            this.hashTable.set(`${this.status[0][0]}${this.status[0][1]}${this.status[1][0]}${this.status[1][1]}${isMaximizing ? 1 : 0}d${depth}`, bestScore);\r\n            return bestScore;\r\n        } else {\r\n            let moves = this.getMoves(1);\r\n            let bestScore = Infinity;\r\n            for(let i = 0; i < moves.length; i++){\r\n                let save = [[this.status[0][0],this.status[0][1]],[this.status[1][0],this.status[1][1]]];\r\n                this.playMove(moves[i]);\r\n                let score = this.solveBoard(true,depth-1);\r\n                this.status = [[save[0][0],save[0][1]],[save[1][0],save[1][1]]];\r\n                if(score < bestScore){\r\n                    bestScore = score; \r\n                }\r\n            }\r\n            this.hashTable.set(`${this.status[0][0]}${this.status[0][1]}${this.status[1][0]}${this.status[1][1]}${isMaximizing ? 1 : 0}d${depth}`, bestScore);\r\n            return bestScore;\r\n        }\r\n    }\r\n    playMove = (b:number) => {\r\n        let h1 = [(b & 16) >> 4, (b & 8) >> 3];\r\n        let h2 = [(b & 4) >> 2,(b & 2) >> 1];\r\n        let choice = b & 1; \r\n        let hand1 = this.status[h1[0]][h1[1]];\r\n        let hand2 = this.status[h2[0]][h2[1]];\r\n        if(this.status[h1[0]] == this.status[h2[0]]){\r\n            let output = [];\r\n            let total = hand1 + hand2;\r\n            for(let i = 0; i <= total - i; i++){\r\n              if(i != Math.min(hand1, hand2) && total - i < 5){\r\n                output.push([total - i, i]);\r\n              }\r\n            }\r\n            this.status[h1[0]][h1[1]] = output[choice][1];\r\n            this.status[h2[0]][h2[1]] = output[choice][0];\r\n        } else {\r\n            if(this.doleftovers){\r\n                this.status[h2[0]][h2[1]] = hand2 + hand1 <= 4 ? hand2 + hand1 : (hand2 + hand1) - 5;\r\n            } else {\r\n                this.status[h2[0]][h2[1]] = hand2 + hand1 <= 4 ? hand2 + hand1 : 0;\r\n            }\r\n        }\r\n    }\r\n    private getMoves = (turn:number) => {\r\n        let output = [];\r\n        for(let i = 0; i < 2; i++){\r\n            if(this.status[turn][i] != 0){\r\n                for(let j = 0; j < 2; j++){\r\n                    if(this.status[turn ^ 1][j] != 0){\r\n                        output.push(parseInt((`${turn}${i}${turn ^ 1}${j}0`),2));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let o = 0;\r\n        let total = this.status[turn][0] + this.status[turn][1];\r\n        for(let j = 0; j <= total - j; j++){\r\n            if(j != Math.min(this.status[turn][0], this.status[turn][1]) && total - j < 5){\r\n                o++;\r\n            }\r\n        }\r\n        for(let j = 0; j < o; j++){\r\n            let e = parseInt((`${turn}0${turn}1${j}`),2)\r\n            if(!output.includes(e)){\r\n                output.push(e);\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n}","import {Solver} from './Minimax';\r\nonmessage = (e) =>{\r\n    let solve = new Solver(e.data[0], e.data[3]);\r\n    let response = solve.getBestMove(e.data[1],e.data[2]);\r\n    solve.playMove(response);\r\n    postMessage([solve.status[0][0],solve.status[0][1],solve.status[1][0],solve.status[1][1]]);\r\n}"],"names":["Solver","constructor","s","d","status","hashTable","Map","doleftovers","getBestMove","isMaximizing","depth","moves","this","getMoves","bestScore","Infinity","bestMove","i","length","save","playMove","score","solveBoard","has","get","set","b","h1","h2","choice","hand1","hand2","output","total","Math","min","push","turn","j","parseInt","o","e","includes","onmessage","solve","data","response","postMessage"],"sourceRoot":""}